{
  "name": "Currency Converter",
  "tagline": "A Python currency converter using the European Central Bank data.",
  "body": "This is a currency converter that uses historical rates against a\r\nreference currency (Euro).\r\n\r\nCurrency data sources\r\n---------------------\r\n\r\nThe default source is the [European Central Bank](http://www.ecb.int/).\r\nThis is the ECB historical rates for 42 currencies against the Euro\r\nsince 1999. It can be downloaded here:\r\n[eurofxref-hist.zip](http://www.ecb.int/stats/eurofxref/eurofxref-hist.zip).\r\nThe converter can use different sources as long as the format is the\r\nsame.\r\n\r\nInstallation\r\n------------\r\n\r\nYou can install directly after cloning:\r\n\r\n```bash\r\n$ python setup.py install --user\r\n```\r\n\r\nOr use the Python package:\r\n\r\n```bash\r\n$ pip install --user currencyconverter\r\n```\r\n\r\nCommand line tool\r\n-----------------\r\n\r\nAfter installation, you should have `currency_converter` in your\r\n`$PATH`:\r\n\r\n```bash\r\n$ currency_converter 100 USD --to EUR\r\nAvailable currencies [42]:\r\nAUD BGN BRL CAD CHF CNY CYP CZK DKK EEK\r\nEUR GBP HKD HRK HUF IDR ILS INR ISK JPY\r\nKRW LTL LVL MTL MXN MYR NOK NZD PHP PLN\r\nROL RON RUB SEK SGD SIT SKK THB TRL TRY\r\nUSD ZAR\r\n\r\n\"100.000 USD\" is \"87.881 EUR\" on 2016-04-20\r\n```\r\n\r\nPython API\r\n----------\r\n\r\nCreate once the currency converter object:\r\n\r\n```python\r\n>>> from currency_converter import CurrencyConverter\r\n>>> c = CurrencyConverter()\r\n```\r\n\r\nConvert from `EUR` to `USD` using the last available rate:\r\n\r\n```python\r\n>>> c.convert(100, 'EUR', 'USD') # doctest: +SKIP\r\n137.5...\r\n```\r\n\r\nDefault target currency is `EUR`:\r\n\r\n```python\r\n>>> c.convert(100, 'EUR')\r\n100.0\r\n>>> c.convert(100, 'USD') # doctest: +SKIP\r\n72.67...\r\n```\r\n\r\nYou can change the date of the rate:\r\n\r\n```python\r\n>>> from datetime import date # datetime works too\r\n>>> c.convert(100, 'EUR', 'USD', date=date(2013, 3, 21))\r\n129.1...\r\n```\r\n\r\n### Fallbacks\r\n\r\nSome rates are missing:\r\n\r\n```python\r\n>>> c.convert(100, 'BGN', date=date(2010, 11, 21))\r\nTraceback (most recent call last):\r\nRateNotFoundError: BGN has no rate for '2010-11-21'\r\n```\r\n\r\nBut we have a fallback mode for those, using a linear interpolation of\r\nthe closest known rates, as long as you ask for a date within the\r\ncurrency date bounds:\r\n\r\n```python\r\n>>> c = CurrencyConverter(fallback_on_missing_rate=True)\r\n>>> c.convert(100, 'BGN', date=date(2010, 11, 21))\r\n51.12...\r\n```\r\n\r\nWe also have a fallback mode for dates outside the currency bounds:\r\n\r\n```python\r\n>>> c = CurrencyConverter()\r\n>>> c.convert(100, 'EUR', 'USD', date=date(1986, 2, 2))\r\nTraceback (most recent call last):\r\nValueError: '1986-02-02' not in USD bounds '1999-01-04/2016-04-20'\r\n>>> \r\n>>> c = CurrencyConverter(fallback_on_wrong_date=True)\r\n>>> c.convert(100, 'EUR', 'USD', date=date(1986, 2, 2)) # fallback to 1999-01-04\r\n117.89...\r\n```\r\n\r\n### Other attributes\r\n\r\n-   `bounds` lets you know the first and last available date for each\r\n    currency\r\n\r\n```python\r\n>>> first_date, last_date = c.bounds['USD']\r\n>>> first_date\r\ndatetime.date(1999, 1, 4)\r\n>>> last_date\r\ndatetime.date(2016, 4, 20)\r\n```\r\n\r\n-   `currencies` is a set containing all available currencies\r\n\r\n```python\r\n>>> c.currencies # doctest: +SKIP\r\nset(['SGD', 'CAD', 'SEK', 'GBP', ...\r\n>>> 'AAA' in c.currencies\r\nFalse\r\n>>> c.convert(100, 'AAA')\r\nTraceback (most recent call last):\r\nValueError: AAA is not a supported currency\r\n```\r\n\r\nFinally, you can use your own currency file, as long as it has the same\r\nformat (ECB):\r\n\r\n```python\r\n>>> c = CurrencyConverter('./path/to/currency/file.csv') # doctest: +SKIP\r\n```",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}